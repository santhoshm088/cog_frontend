{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91997\\\\Downloads\\\\coding_club_event-master\\\\coding_club_event-master\\\\front_end\\\\src\\\\screens\\\\Question1Screen.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useReducer, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport '../styles/QuestionScreen.css';\nimport { getError } from '../utils';\nimport Axios from 'axios';\nimport { Store } from '../Store';\nimport ReactLoading from 'react-loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_REQUEST':\n      return {\n        ...state,\n        loading: true\n      };\n    case 'FETCH_SUCCESS':\n      return {\n        ...state,\n        loading: false\n      };\n    case 'FETCH_FAILED':\n      return {\n        ...state,\n        loading: false\n      };\n  }\n};\nexport default function Question1Screen() {\n  _s();\n  const {\n    state,\n    dispatch: ctxDispatch\n  } = useContext(Store);\n  const {\n    userInfo,\n    stages\n  } = state;\n  const [{\n    loading\n  }, dispatch] = useReducer(reducer, {\n    loading: false\n  });\n  const navigate = useNavigate();\n  const [password, setPassword] = useState('');\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n  const submitHandler = async e => {\n    e.preventDefault();\n    if (password === 'ZERO') {\n      try {\n        if (!stages.includes(1)) {\n          const rollno = userInfo.rollno;\n          const name = userInfo.name;\n          const email = userInfo.email;\n          dispatch({\n            type: 'FETCH_REQUEST'\n          });\n          const {\n            data\n          } = await Axios.put('/stages/stage1', {\n            rollno,\n            name,\n            email\n          }, {\n            headers: {\n              authorization: `Bearer ${userInfo.token}`\n            }\n          });\n          stages.push(data.stage);\n          ctxDispatch({\n            type: 'STAGE',\n            payload: stages\n          });\n          localStorage.setItem('stages', JSON.stringify(stages));\n          dispatch({\n            type: 'FETCH_SUCCESS'\n          });\n          navigate('/stage2');\n        } else {\n          navigate('/stage2');\n        }\n      } catch (err) {\n        dispatch({\n          type: 'FETCH_FAILED'\n        });\n        toast.error(getError(err));\n      }\n    } else {\n      toast.error('Wrong Password!');\n    }\n  };\n  return (\n    /*#__PURE__*/\n    // <section className=\"question-page\">\n    //   {loading && (\n    //     <div className=\"overlay1\">\n    //       <div className=\"loading-box\">\n    //         <ReactLoading\n    //           type=\"spinningBubbles\"\n    //           color=\"#00a2ff\"\n    //           height={'10%'}\n    //           width={'10%'}\n    //         />\n    //       </div>\n    //     </div>\n    //   )}\n    //   <header className=\"question-header\"> Stage 1 </header>{' '}\n    //   <main className=\"question-container\">\n    //     <div className=\"question-description\">\n    //       <p>\n    //         Pranesh is a UG Scholar. He is given with problem where he has to\n    //         find the number of characters in a string equivalent to the given\n    //         ASCII value. The secret key for the next stage is higher case of the\n    //         result.\n    //       </p>{' '}\n    //     </div>{' '}\n    //     <div className=\"format\">\n    //       <h3> INPUT: - </h3>{' '}\n    //       <p>\n    //         First line contains the string S.\n    //         <br />\n    //         Second line contains an integer N.\n    //       </p>\n    //       <br />\n    //       <h3> CONSTRAINTS: - </h3>{' '}\n    //       <p>\n    //         {' '}\n    //         0 &lt; strlen(S) &lt; 10<sup>5</sup> <br />0 &lt; N &lt; 10\n    //         <sup>10</sup>{' '}\n    //       </p>\n    //       <br />\n    //       <h3> OUTPUT: - </h3>{' '}\n    //       <p>\n    //         Print the number of characters which is equal to the target ASCII.\n    //       </p>{' '}\n    //     </div>\n    //     <br />\n    //     <div className=\"sample-input\">\n    //       <h3> SAMPLE INPUT 1: - </h3>{' '}\n    //       <p>\n    //         {' '}\n    //         cse coding club <br />\n    //         99{' '}\n    //       </p>\n    //       <br />\n    //       <h3> SAMPLE OUTPUT 1: - </h3> <p> 3 </p>\n    //       <br /> <h3> EXPLANATION 1: - </h3>{' '}\n    //       <p>\n    //         ASCII value of character 'c' is 99. There are 3 characters 'c' in\n    //         the given string.\n    //       </p>{' '}\n    //     </div>\n    //     <br />\n    //     <div className=\"sample-input\">\n    //       <h3> SAMPLE INPUT 2: - </h3>{' '}\n    //       <p>\n    //         {' '}\n    //         happy learning <br />\n    //         112{' '}\n    //       </p>\n    //       <br />\n    //       <h3> SAMPLE OUTPUT 2: - </h3> <p> 2 </p>\n    //       <br /> <h3> EXPLANATION 2: - </h3>{' '}\n    //       <p>\n    //         ASCII value of character 'p' is 113. There are 3 characters 'p' in\n    //         the given string.\n    //       </p>{' '}\n    //     </div>{' '}\n    //   </main>\n    //   <div className=\"gift-container\">\n    //     <div className=\"box\">\n    //       <div className=\"box-body\">\n    //         <div className=\"input-container\">\n    //           cognizance\n    //           <br />\n    //           98\n    //         </div>\n    //         <div className=\"box-lid\">\n    //           <div className=\"box-bowtie\"></div>\n    //         </div>\n    //       </div>\n    //     </div>\n    //   </div>\n    //   <section className=\"stage-form-container\">\n    //     <form className=\"stage-form\" onSubmit={submitHandler}>\n    //       <div className=\"input-field-tags\">\n    //         <label>\n    //           {' '}\n    //           Password <div className=\"required-element\"> * </div>{' '}\n    //         </label>{' '}\n    //         <input\n    //           type=\"password\"\n    //           onChange={(e) => setPassword(e.target.value)}\n    //           className=\"input-fields stage-input-fields\"\n    //           required\n    //         />\n    //       </div>{' '}\n    //       <button type=\"submit\" className=\"continue-button\">\n    //         Continue{' '}\n    //       </button>{' '}\n    //     </form>{' '}\n    //     <div className=\"coding-image-container\">\n    //       <img src={require('../assets/coding.gif')} alt=\"Coding\" />\n    //     </div>{' '}\n    //   </section>{' '}\n    //   <section className=\"pagination-button-container\">\n    //     <Link to=\"/\" className=\"previous-button\">\n    //       <i className=\"fa-solid fa-angles-left left-arrow\"> </i> Previous{' '}\n    //     </Link>{' '}\n    //     {stages.includes(1) && (\n    //       <Link to=\"/stage2\" className=\"next-button\">\n    //         Next <i className=\"fa-solid fa-angles-right right-arrow\"> </i>{' '}\n    //       </Link>\n    //     )}\n    //   </section>{' '}\n    // </section>\n    _jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 4\n    }, this)\n  );\n}\n_s(Question1Screen, \"8Sxtll+fXzgW5e8P3n4gdB9gRGI=\", false, function () {\n  return [useNavigate];\n});\n_c = Question1Screen;\nvar _c;\n$RefreshReg$(_c, \"Question1Screen\");","map":{"version":3,"names":["React","useContext","useEffect","useReducer","useState","Link","useNavigate","toast","getError","Axios","Store","ReactLoading","jsxDEV","_jsxDEV","reducer","state","action","type","loading","Question1Screen","_s","dispatch","ctxDispatch","userInfo","stages","navigate","password","setPassword","window","scrollTo","submitHandler","e","preventDefault","includes","rollno","name","email","data","put","headers","authorization","token","push","stage","payload","localStorage","setItem","JSON","stringify","err","error","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/91997/Downloads/coding_club_event-master/coding_club_event-master/front_end/src/screens/Question1Screen.js"],"sourcesContent":["import React, { useContext, useEffect, useReducer, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport '../styles/QuestionScreen.css';\nimport { getError } from '../utils';\nimport Axios from 'axios';\nimport { Store } from '../Store';\nimport ReactLoading from 'react-loading';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_REQUEST':\n      return { ...state, loading: true };\n    case 'FETCH_SUCCESS':\n      return { ...state, loading: false };\n    case 'FETCH_FAILED':\n      return { ...state, loading: false };\n  }\n};\n\nexport default function Question1Screen() {\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { userInfo, stages } = state;\n\n  const [{ loading }, dispatch] = useReducer(reducer, { loading: false });\n\n  const navigate = useNavigate();\n\n  const [password, setPassword] = useState('');\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  const submitHandler = async (e) => {\n    e.preventDefault();\n    if (password === 'ZERO') {\n      try {\n        if (!stages.includes(1)) {\n          const rollno = userInfo.rollno;\n          const name = userInfo.name;\n          const email = userInfo.email;\n          dispatch({ type: 'FETCH_REQUEST' });\n          const { data } = await Axios.put(\n            '/stages/stage1',\n            {\n              rollno,\n              name,\n              email,\n            },\n            { headers: { authorization: `Bearer ${userInfo.token}` } }\n          );\n          stages.push(data.stage);\n          ctxDispatch({ type: 'STAGE', payload: stages });\n          localStorage.setItem('stages', JSON.stringify(stages));\n          dispatch({ type: 'FETCH_SUCCESS' });\n          navigate('/stage2');\n        } else {\n          navigate('/stage2');\n        }\n      } catch (err) {\n        dispatch({ type: 'FETCH_FAILED' });\n        toast.error(getError(err));\n      }\n    } else {\n      toast.error('Wrong Password!');\n    }\n  };\n  return (\n    // <section className=\"question-page\">\n    //   {loading && (\n    //     <div className=\"overlay1\">\n    //       <div className=\"loading-box\">\n    //         <ReactLoading\n    //           type=\"spinningBubbles\"\n    //           color=\"#00a2ff\"\n    //           height={'10%'}\n    //           width={'10%'}\n    //         />\n    //       </div>\n    //     </div>\n    //   )}\n    //   <header className=\"question-header\"> Stage 1 </header>{' '}\n    //   <main className=\"question-container\">\n    //     <div className=\"question-description\">\n    //       <p>\n    //         Pranesh is a UG Scholar. He is given with problem where he has to\n    //         find the number of characters in a string equivalent to the given\n    //         ASCII value. The secret key for the next stage is higher case of the\n    //         result.\n    //       </p>{' '}\n    //     </div>{' '}\n    //     <div className=\"format\">\n    //       <h3> INPUT: - </h3>{' '}\n    //       <p>\n    //         First line contains the string S.\n    //         <br />\n    //         Second line contains an integer N.\n    //       </p>\n    //       <br />\n    //       <h3> CONSTRAINTS: - </h3>{' '}\n    //       <p>\n    //         {' '}\n    //         0 &lt; strlen(S) &lt; 10<sup>5</sup> <br />0 &lt; N &lt; 10\n    //         <sup>10</sup>{' '}\n    //       </p>\n    //       <br />\n    //       <h3> OUTPUT: - </h3>{' '}\n    //       <p>\n    //         Print the number of characters which is equal to the target ASCII.\n    //       </p>{' '}\n    //     </div>\n    //     <br />\n    //     <div className=\"sample-input\">\n    //       <h3> SAMPLE INPUT 1: - </h3>{' '}\n    //       <p>\n    //         {' '}\n    //         cse coding club <br />\n    //         99{' '}\n    //       </p>\n    //       <br />\n    //       <h3> SAMPLE OUTPUT 1: - </h3> <p> 3 </p>\n    //       <br /> <h3> EXPLANATION 1: - </h3>{' '}\n    //       <p>\n    //         ASCII value of character 'c' is 99. There are 3 characters 'c' in\n    //         the given string.\n    //       </p>{' '}\n    //     </div>\n    //     <br />\n    //     <div className=\"sample-input\">\n    //       <h3> SAMPLE INPUT 2: - </h3>{' '}\n    //       <p>\n    //         {' '}\n    //         happy learning <br />\n    //         112{' '}\n    //       </p>\n    //       <br />\n    //       <h3> SAMPLE OUTPUT 2: - </h3> <p> 2 </p>\n    //       <br /> <h3> EXPLANATION 2: - </h3>{' '}\n    //       <p>\n    //         ASCII value of character 'p' is 113. There are 3 characters 'p' in\n    //         the given string.\n    //       </p>{' '}\n    //     </div>{' '}\n    //   </main>\n    //   <div className=\"gift-container\">\n    //     <div className=\"box\">\n    //       <div className=\"box-body\">\n    //         <div className=\"input-container\">\n    //           cognizance\n    //           <br />\n    //           98\n    //         </div>\n    //         <div className=\"box-lid\">\n    //           <div className=\"box-bowtie\"></div>\n    //         </div>\n    //       </div>\n    //     </div>\n    //   </div>\n    //   <section className=\"stage-form-container\">\n    //     <form className=\"stage-form\" onSubmit={submitHandler}>\n    //       <div className=\"input-field-tags\">\n    //         <label>\n    //           {' '}\n    //           Password <div className=\"required-element\"> * </div>{' '}\n    //         </label>{' '}\n    //         <input\n    //           type=\"password\"\n    //           onChange={(e) => setPassword(e.target.value)}\n    //           className=\"input-fields stage-input-fields\"\n    //           required\n    //         />\n    //       </div>{' '}\n    //       <button type=\"submit\" className=\"continue-button\">\n    //         Continue{' '}\n    //       </button>{' '}\n    //     </form>{' '}\n    //     <div className=\"coding-image-container\">\n    //       <img src={require('../assets/coding.gif')} alt=\"Coding\" />\n    //     </div>{' '}\n    //   </section>{' '}\n    //   <section className=\"pagination-button-container\">\n    //     <Link to=\"/\" className=\"previous-button\">\n    //       <i className=\"fa-solid fa-angles-left left-arrow\"> </i> Previous{' '}\n    //     </Link>{' '}\n    //     {stages.includes(1) && (\n    //       <Link to=\"/stage2\" className=\"next-button\">\n    //         Next <i className=\"fa-solid fa-angles-right right-arrow\"> </i>{' '}\n    //       </Link>\n    //     )}\n    //   </section>{' '}\n    // </section>\n\n   <div>\n    \n   </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}