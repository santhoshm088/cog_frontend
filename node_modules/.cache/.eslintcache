[{"C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\index.js":"1","C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\Store.js":"2","C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\reportWebVitals.js":"3","C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\App.js":"4","C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\AdminSigninScreen.js":"5","C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\AdminScreen.js":"6","C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\FinishScreen.js":"7","C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\HomeScreen.js":"8","C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\GuidelinesScreen.js":"9","C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\Question1Screen.js":"10","C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\Question2Screen.js":"11","C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\Question3Screen.js":"12","C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\SigninScreen.js":"13","C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\Question4Screen.js":"14","C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\Question5Screen.js":"15","C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\utils.js":"16","C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\components\\Navbar.js":"17","C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\Question6Screen.js":"18","C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\Question7Screen.js":"19"},{"size":770,"mtime":1711348793741,"results":"20","hashOfConfig":"21"},{"size":2340,"mtime":1711307042529,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1711292995630,"results":"23","hashOfConfig":"21"},{"size":2793,"mtime":1711375270320,"results":"24","hashOfConfig":"21"},{"size":2145,"mtime":1711543593635,"results":"25","hashOfConfig":"21"},{"size":8488,"mtime":1711773240356,"results":"26","hashOfConfig":"21"},{"size":1502,"mtime":1711292996411,"results":"27","hashOfConfig":"21"},{"size":1577,"mtime":1711431959409,"results":"28","hashOfConfig":"21"},{"size":3666,"mtime":1711561957192,"results":"29","hashOfConfig":"21"},{"size":6049,"mtime":1711613794091,"results":"30","hashOfConfig":"21"},{"size":6073,"mtime":1712120813935,"results":"31","hashOfConfig":"21"},{"size":6551,"mtime":1711292996714,"results":"32","hashOfConfig":"21"},{"size":6940,"mtime":1711555670146,"results":"33","hashOfConfig":"21"},{"size":5655,"mtime":1711307635613,"results":"34","hashOfConfig":"21"},{"size":5410,"mtime":1711304430511,"results":"35","hashOfConfig":"21"},{"size":150,"mtime":1711292995684,"results":"36","hashOfConfig":"21"},{"size":2591,"mtime":1711382869874,"results":"37","hashOfConfig":"21"},{"size":5573,"mtime":1711306915092,"results":"38","hashOfConfig":"21"},{"size":5573,"mtime":1711306763093,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16u3d0p",{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"46"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"46"},"C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\index.js",[],[],"C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\Store.js",[],[],[],"C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\reportWebVitals.js",[],[],"C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\App.js",["105"],[],"C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\AdminSigninScreen.js",["106"],[],"C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\AdminScreen.js",["107","108"],[],"import Axios from 'axios';\nimport React, { useContext, useEffect, useReducer, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { Store } from '../Store';\nimport '../styles/AdminScreen.css';\nimport { getError } from '../utils';\nimport ReactLoading from 'react-loading';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_REQUEST':\n      return { ...state, loading: true };\n    case 'FETCH_SUCCESS':\n      return { ...state, loading: false };\n    case 'FETCH_FAILED':\n      return { ...state, loading: false };\n  }\n};\n\nexport default function AdminScreen() {\n  const [stage, setStage] = useState(0);\n\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { userList, stage1, stage2, stage3, stage4, stage5,stage6,stage7 } = state;\n\n  const [{ loading }, dispatch] = useReducer(reducer, { loading: false });\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        dispatch({ type: 'FETCH_REQUEST' });\n        const { data } = await Axios.get('/users/logincount');\n        localStorage.setItem('userLists', JSON.stringify(data));\n        ctxDispatch({ type: 'USER_LISTS', payload: data });\n        dispatch({ type: 'FETCH_SUCCESS' });\n      } catch (err) {\n        dispatch({ type: 'FETCH_FAILED' });\n        toast.error(getError(err));\n      }\n    };\n    const fetchStage1 = async () => {\n      try {\n        dispatch({ type: 'FETCH_REQUEST' });\n        const { data } = await Axios.get('/stages/stage1count');\n        localStorage.setItem('stage1', JSON.stringify(data));\n        ctxDispatch({ type: 'STAGE_1', payload: data });\n        dispatch({ type: 'FETCH_SUCCESS' });\n      } catch (err) {\n        dispatch({ type: 'FETCH_FAILED' });\n        toast.error(getError(err));\n      }\n    };\n    const fetchStage2 = async () => {\n      try {\n        dispatch({ type: 'FETCH_REQUEST' });\n        const { data } = await Axios.get('/stages/stage2count');\n        localStorage.setItem('stage2', JSON.stringify(data));\n        ctxDispatch({ type: 'STAGE_2', payload: data });\n        dispatch({ type: 'FETCH_SUCCESS' });\n      } catch (err) {\n        dispatch({ type: 'FETCH_FAILED' });\n        toast.error(getError(err));\n      }\n    };\n    const fetchStage3 = async () => {\n      try {\n        dispatch({ type: 'FETCH_REQUEST' });\n        const { data } = await Axios.get('/stages/stage3count');\n        localStorage.setItem('stage3', JSON.stringify(data));\n        ctxDispatch({ type: 'STAGE_3', payload: data });\n        dispatch({ type: 'FETCH_SUCCESS' });\n      } catch (err) {\n        dispatch({ type: 'FETCH_FAILED' });\n        toast.error(getError(err));\n      }\n    };\n    const fetchStage4 = async () => {\n      try {\n        dispatch({ type: 'FETCH_REQUEST' });\n        const { data } = await Axios.get('/stages/stage4count');\n        localStorage.setItem('stage4', JSON.stringify(data));\n        ctxDispatch({ type: 'STAGE_4', payload: data });\n        dispatch({ type: 'FETCH_SUCCESS' });\n      } catch (err) {\n        dispatch({ type: 'FETCH_FAILED' });\n        toast.error(getError(err));\n      }\n    };\n    const fetchStage5 = async () => {\n      try {\n        dispatch({ type: 'FETCH_REQUEST' });\n        const { data } = await Axios.get('/stages/stage5count');\n        localStorage.setItem('stage5', JSON.stringify(data));\n        ctxDispatch({ type: 'STAGE_5', payload: data });\n        dispatch({ type: 'FETCH_SUCCESS' });\n      } catch (err) {\n        dispatch({ type: 'FETCH_FAILED' });\n        toast.error(getError(err));\n      }\n    };\n    const fetchStage6 = async () => {\n      try {\n        dispatch({ type: 'FETCH_REQUEST' });\n        const { data } = await Axios.get('/stages/stage6count');\n        localStorage.setItem('stage6', JSON.stringify(data));\n        ctxDispatch({ type: 'STAGE_6', payload: data });\n        dispatch({ type: 'FETCH_SUCCESS' });\n      } catch (err) {\n        dispatch({ type: 'FETCH_FAILED' });\n        toast.error(getError(err));\n      }\n    };\n\n    const fetchStage7 = async () => {\n      try {\n        dispatch({ type: 'FETCH_REQUEST' });\n        const { data } = await Axios.get('/stages/stage7count');\n        localStorage.setItem('stage7', JSON.stringify(data));\n        ctxDispatch({ type: 'STAGE_7', payload: data });\n        dispatch({ type: 'FETCH_SUCCESS' });\n      } catch (err) {\n        dispatch({ type: 'FETCH_FAILED' });\n        toast.error(getError(err));\n      }\n    };\n\n    fetchStage1();\n    fetchStage2();\n    fetchStage3();\n    fetchStage4();\n    fetchStage5();\n    fetchStage6();\n    fetchStage7();\n    fetchUsers();\n  }, []);\n\n  const users =\n    stage === 1\n      ? stage1\n      : stage === 2\n      ? stage2\n      : stage === 3\n      ? stage3\n      : stage === 4\n      ? stage4\n      : stage === 5\n      ? stage5\n      :stage === 6\n      ? stage6\n      :stage === 7\n      ? stage7\n      : userList;\n  return (\n    <section className=\"admin-page\">\n      <header className=\"admin-header\"> ADMIN </header>{' '}\n      {loading && (\n        <div className=\"loading-box\">\n          <ReactLoading\n            type=\"spinningBubbles\"\n            color=\"#00a2ff\"\n            height={'10%'}\n            width={'10%'}\n          />\n        </div>\n      )}\n      {!loading && (\n        <section className=\"stage-button-container\">\n          <button\n            className={\n              stage === 0\n                ? 'stage-button btn0 stage-active'\n                : 'stage-button btn0'\n            }\n            onClick={() => setStage(0)}\n          >\n            {' '}\n            Login Count{' '}\n          </button>{' '}\n          <button\n            className={\n              stage === 1\n                ? 'stage-button btn1 stage-active'\n                : 'stage-button btn1'\n            }\n            onClick={() => setStage(1)}\n          >\n            {' '}\n            Stage 1{' '}\n          </button>{' '}\n          <button\n            className={\n              stage === 2\n                ? 'stage-button btn2 stage-active'\n                : 'stage-button btn2'\n            }\n            onClick={() => setStage(2)}\n          >\n            {' '}\n            Stage 2{' '}\n          </button>{' '}\n          <button\n            className={\n              stage === 3\n                ? 'stage-button btn3 stage-active'\n                : 'stage-button btn3'\n            }\n            onClick={() => setStage(3)}\n          >\n            {' '}\n            Stage 3{' '}\n          </button>{' '}\n          <button\n            className={\n              stage === 4\n                ? 'stage-button btn4 stage-active'\n                : 'stage-button btn4'\n            }\n            onClick={() => setStage(4)}\n          >\n            {' '}\n            Stage 4{' '}\n          </button>{' '}\n          <button\n            className={\n              stage === 5\n                ? 'stage-button btn5 stage-active'\n                : 'stage-button btn5'\n            }\n            onClick={() => setStage(5)}\n          >\n            {' '}\n            Stage 5{' '}\n          </button>{' '}\n\n\n\n          <button\n            className={\n              stage === 6\n                ? 'stage-button btn1 stage-active'\n                : 'stage-button btn1'\n            }\n            onClick={() => setStage(6)}\n          >\n            {' '}\n            Stage 6{' '}\n          </button>{' '}\n\n          <button\n            className={\n              stage === 7\n                ? 'stage-button btn1 stage-active'\n                : 'stage-button btn1'\n            }\n            onClick={() => setStage(7)}\n          >\n            {' '}\n            Stage 7{' '}\n          </button>{' '}\n\n\n        </section>\n      )}\n      {!loading && (\n        <main className=\"stage-table-container\">\n          <table className=\"stage-table\">\n            <thead>\n              <tr>\n                <th> S.No </th>\n                <th> Name </th>\n                <th> Roll No </th>\n                <th> Email </th>\n                <th> Time </th>\n              </tr>\n            </thead>\n            <tbody>\n              {users.length > 0 &&\n                users.map((data, idx) => (\n                  <tr key={idx + 1}>\n                    <td> {idx + 1} </td>\n                    <td> {data.name} </td>\n                    <td> {data.rollno} </td>\n                    <td> {data.email} </td>\n                    <td> {data.loginTime} </td>\n                  </tr>\n                ))}\n            </tbody>\n          </table>\n        </main>\n      )}\n    </section>\n  );\n}\n",[],"C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\FinishScreen.js",[],[],"C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\HomeScreen.js",[],[],"C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\GuidelinesScreen.js",["109"],[],"C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\Question1Screen.js",["110"],[],"C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\Question2Screen.js",["111"],[],"C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\Question3Screen.js",["112"],[],"import React, { useContext, useEffect, useReducer, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport '../styles/QuestionScreen.css';\nimport { getError } from '../utils';\nimport Axios from 'axios';\nimport { Store } from '../Store';\nimport ReactLoading from 'react-loading';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_REQUEST':\n      return { ...state, loading: true };\n    case 'FETCH_SUCCESS':\n      return { ...state, loading: false };\n    case 'FETCH_FAILED':\n      return { ...state, loading: false };\n  }\n};\n\nexport default function Question1Screen() {\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { userInfo, stages } = state;\n\n  const [{ loading }, dispatch] = useReducer(reducer, { loading: false });\n\n  const navigate = useNavigate();\n\n  const [password, setPassword] = useState('');\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  const submitHandler = async (e) => {\n    e.preventDefault();\n    if (password === \"'225''229''110''109'\") {\n      try {\n        if (!stages.includes(3)) {\n          const rollno = userInfo.rollno;\n          const name = userInfo.name;\n          const email = userInfo.email;\n          dispatch({ type: 'FETCH_REQUEST' });\n          const { data } = await Axios.put(\n            '/stages/stage3',\n            {\n              rollno,\n              name,\n              email,\n            },\n            { headers: { authorization: `Bearer ${userInfo.token}` } }\n          );\n          stages.push(data.stage);\n          ctxDispatch({ type: 'STAGE', payload: stages });\n          localStorage.setItem('stages', JSON.stringify(stages));\n          dispatch({ type: 'FETCH_SUCCESS' });\n          navigate('/stage4');\n        } else {\n          navigate('/stage4');\n        }\n      } catch (err) {\n        dispatch({ type: 'FETCH_FAILED' });\n        toast.error(getError(err));\n      }\n    } else {\n      toast.error('Wrong Password!');\n    }\n  };\n  return (\n    <section className=\"question-page\">\n      {loading && (\n        <div className=\"overlay1\">\n          <div className=\"loading-box\">\n            <ReactLoading\n              type=\"spinningBubbles\"\n              color=\"#00a2ff\"\n              height={'10%'}\n              width={'10%'}\n            />\n          </div>\n        </div>\n      )}\n      <header className=\"question-header\"> Stage 3 </header>{' '}\n      <main className=\"question-container\">\n        <div className=\"question-description\">\n          <p>\n            Raja has a 10 days holidays for his semester, while he was alone in\n            home, he gets bored. He wants to play a game with his friend Ragu.\n            He has two arrays of characters. His task is to add the respective\n            characters. He need reverse the first script and perform operation.\n            Help him to add those characters. The secret key for the next stage\n            is result and each value is enclosed within single quotes.\n            <br />\n            <strong>Note:-</strong>\n            <span>Don't consider white spaces in secret key.</span>\n          </p>{' '}\n        </div>{' '}\n        <div className=\"format\">\n          <h3> INPUT: - </h3> <p>First line contains the 2D array.</p>\n          <br />\n          <h3> CONSTRAINTS: - </h3>{' '}\n          <p>\n            Array contains lowercase alphabets.\n            <br /> 0 &lt; strlen(A[i]) &lt; 10\n            <sup>5</sup> <br />0 &lt; strlen(A) &lt; 2{' '}\n          </p>\n          <br />\n          <h3> OUTPUT: - </h3> <p>Print the resultant array.</p>{' '}\n        </div>\n        <br />\n        <div className=\"sample-input\">\n          <h3> SAMPLE INPUT 1: - </h3> <p>[ [‘a’,’b’,’c’],[‘d’,’e’,’f’] ]</p>\n          <br />\n          <h3> SAMPLE OUTPUT 1: - </h3> <p> [201,199,197]</p>\n          <br /> <h3> EXPLANATION 1: - </h3>{' '}\n          <p>\n            Reversing the first subscript [c , b , a]\n            <br />\n            Reversing the second subscript [ f, e, d]\n            <br />\n            Adding - ASCII values of c and f - 201 , b and e – 199 , d and a\n            -197\n            <br />\n            Res = [201, 199 , 197]\n            <br />\n          </p>{' '}\n        </div>\n        <br />\n        <div className=\"sample-input\">\n          <h3> SAMPLE INPUT 2: - </h3> <p>[ [‘x’,’y’,’z’],[‘p’,’q’,’r’] ]</p>\n          <br />\n          <h3> SAMPLE OUTPUT 2: - </h3> <p> [234,234,234] </p>\n          <br /> <h3> EXPLANATION 2: - </h3>{' '}\n          <p>\n            Reversing the first subscript [z , y , x]\n            <br />\n            Reversing the second subscript [ p, q, r]\n            <br />\n            Adding - ASCII values of z and p - 234 , y and q – 234 , x and r\n            -234\n            <br />\n            Res = [234, 234 , 234]\n            <br />\n          </p>\n        </div>{' '}\n      </main>\n      <div className=\"gift-container\">\n        <div className=\"box\">\n          <div className=\"box-body\">\n            <div className=\"input-container\">[['m','n','r','q'],['p','s']]</div>\n            <div className=\"box-lid\">\n              <div className=\"box-bowtie\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <section className=\"stage-form-container\">\n        <form className=\"stage-form\" onSubmit={submitHandler}>\n          <div className=\"input-field-tags\">\n            <label>\n              {' '}\n              Password <div className=\"required-element\"> * </div>{' '}\n            </label>{' '}\n            <input\n              type=\"password\"\n              onChange={(e) => setPassword(e.target.value)}\n              className=\"input-fields stage-input-fields\"\n              required\n            />\n          </div>{' '}\n          <button type=\"submit\" className=\"continue-button\">\n            Continue{' '}\n          </button>{' '}\n        </form>{' '}\n        <div className=\"coding-image-container\">\n          <img src={require('../assets/coding.gif')} alt=\"Coding\" />\n        </div>{' '}\n      </section>{' '}\n      <section className=\"pagination-button-container\">\n        <Link to=\"/stage2\" className=\"previous-button\">\n          <i className=\"fa-solid fa-angles-left left-arrow\"> </i> Previous{' '}\n        </Link>{' '}\n        {stages.includes(3) && (\n          <Link to=\"/stage4\" className=\"next-button\">\n            Next <i className=\"fa-solid fa-angles-right right-arrow\"> </i>{' '}\n          </Link>\n        )}\n      </section>{' '}\n    </section>\n  );\n}\n","C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\SigninScreen.js",["113","114"],[],"C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\Question4Screen.js",["115"],[],"import React, { useContext, useEffect, useReducer, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport '../styles/QuestionScreen.css';\nimport { getError } from '../utils';\nimport Axios from 'axios';\nimport { Store } from '../Store';\nimport ReactLoading from 'react-loading';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_REQUEST':\n      return { ...state, loading: true };\n    case 'FETCH_SUCCESS':\n      return { ...state, loading: false };\n    case 'FETCH_FAILED':\n      return { ...state, loading: false };\n  }\n};\n\nexport default function Question1Screen() {\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { userInfo, stages } = state;\n\n  const [{ loading }, dispatch] = useReducer(reducer, { loading: false });\n\n  const navigate = useNavigate();\n\n  const [password, setPassword] = useState('');\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n  const submitHandler = async (e) => {\n    e.preventDefault();\n    if (password === 'pInK') {\n      try {\n        if (!stages.includes(4)) {\n          const rollno = userInfo.rollno;\n          const name = userInfo.name;\n          const email = userInfo.email;\n          dispatch({ type: 'FETCH_REQUEST' });\n          const { data } = await Axios.put(\n            '/stages/stage4',\n            {\n              rollno,\n              name,\n              email,\n            },\n            { headers: { authorization: `Bearer ${userInfo.token}` } }\n          );\n          stages.push(data.stage);\n          ctxDispatch({ type: 'STAGE', payload: stages });\n          localStorage.setItem('stages', JSON.stringify(stages));\n          dispatch({ type: 'FETCH_SUCCESS' });\n          navigate('/stage5');\n        } else {\n          navigate('/stage5');\n        }\n      } catch (err) {\n        dispatch({ type: 'FETCH_FAILED' });\n        toast.error(getError(err));\n      }\n    } else {\n      toast.error('Wrong Password!');\n    }\n  };\n  return (\n    <section className=\"question-page\">\n      {loading && (\n        <div className=\"overlay1\">\n          <div className=\"loading-box\">\n            <ReactLoading\n              type=\"spinningBubbles\"\n              color=\"#00a2ff\"\n              height={'10%'}\n              width={'10%'}\n            />\n          </div>\n        </div>\n      )}\n      <header className=\"question-header\"> Stage 4 </header>{' '}\n      <main className=\"question-container\">\n        <div className=\"question-description\">\n          <p>\n            A toddler named Shawan, who wants to study colors so badly since it\n            attracted them. Teach him a few colors that come to your mind. The\n            secret key for the next stage is alternate case words of the result\n            and start with lowercase.\n            <br />\n          </p>{' '}\n        </div>{' '}\n        <div className=\"format\">\n          <h3> INPUT: - </h3>{' '}\n          <p>\n            Input 1 : A set of colors\n            <br />\n            Input 2 : A string\n          </p>\n          <br />\n          <h3> CONSTRAINTS: - </h3>{' '}\n          <p>\n            {' '}\n            0 &lt; strlen(A) &lt; 10 <br />0 &lt; strlen(A[i]) &lt; 10\n            <sup>10</sup>{' '}\n          </p>\n          <br />\n          <h3> OUTPUT: - </h3> <p>Print the predicted color.</p>{' '}\n        </div>\n        <br />\n        <div className=\"sample-input\">\n          <h3> SAMPLE INPUT 1: - </h3>{' '}\n          <p>\n            {' '}\n            Blue green red brown purple rose white black brown <br />\n            He wants flowers\n          </p>\n          <br />\n          <h3> SAMPLE OUTPUT 1: - </h3> <p> 8 </p>\n          <br /> <h3> EXPLANATION 1: - </h3>{' '}\n          <p>\n            72+101+119+97+110+116+102+108+111+119+101+114+115=1385\n            <br />\n            1+3+8+5=17\n            <br />\n            1+7=8\n          </p>{' '}\n        </div>\n        <br />\n      </main>\n      <div className=\"gift-container\">\n        <div className=\"box\">\n          <div className=\"box-body\">\n            <div className=\"input-container\">\n              green red blue violet brown black pink black violet brown <br />\n              <br />I like coding.\n            </div>\n            <div className=\"box-lid\">\n              <div className=\"box-bowtie\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <section className=\"stage-form-container\">\n        <form className=\"stage-form\" onSubmit={submitHandler}>\n          <div className=\"input-field-tags\">\n            <label>\n              {' '}\n              Password <div className=\"required-element\"> * </div>{' '}\n            </label>{' '}\n            <input\n              type=\"password\"\n              onChange={(e) => setPassword(e.target.value)}\n              className=\"input-fields stage-input-fields\"\n              required\n            />\n          </div>{' '}\n          <button type=\"submit\" className=\"continue-button\">\n            Continue{' '}\n          </button>{' '}\n        </form>{' '}\n        <div className=\"coding-image-container\">\n          <img src={require('../assets/coding.gif')} alt=\"Coding\" />\n        </div>{' '}\n      </section>{' '}\n      <section className=\"pagination-button-container\">\n        <Link to=\"/stage3\" className=\"previous-button\">\n          <i className=\"fa-solid fa-angles-left left-arrow\"> </i> Previous{' '}\n        </Link>{' '}\n        {stages.includes(4) && (\n          <Link to=\"/stage5\" className=\"next-button\">\n            Next <i className=\"fa-solid fa-angles-right right-arrow\"> </i>{' '}\n          </Link>\n        )}\n      </section>{' '}\n    </section>\n  );\n}\n","C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\Question5Screen.js",["116"],[],"import React, { useContext, useEffect, useReducer, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport '../styles/QuestionScreen.css';\nimport { getError } from '../utils';\nimport Axios from 'axios';\nimport { Store } from '../Store';\nimport ReactLoading from 'react-loading';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_REQUEST':\n      return { ...state, loading: true };\n    case 'FETCH_SUCCESS':\n      return { ...state, loading: false };\n    case 'FETCH_FAILED':\n      return { ...state, loading: false };\n  }\n};\n\nexport default function Question1Screen() {\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { userInfo, stages } = state;\n\n  const [{ loading }, dispatch] = useReducer(reducer, { loading: false });\n\n  const navigate = useNavigate();\n\n  const [password, setPassword] = useState('');\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n  const submitHandler = async (e) => {\n    e.preventDefault();\n    if (password === '1 1 1 2 0 1 2 0 5 0') {\n      try {\n        if (!stages.includes(5)) {\n          const rollno = userInfo.rollno;\n          const name = userInfo.name;\n          const email = userInfo.email;\n          dispatch({ type: 'FETCH_REQUEST' });\n          const { data } = await Axios.put(\n            '/stages/stage5',\n            {\n              rollno,\n              name,\n              email,\n            },\n            { headers: { authorization: `Bearer ${userInfo.token}` } }\n          );\n          stages.push(data.stage);\n          ctxDispatch({ type: 'STAGE', payload: stages });\n          localStorage.setItem('stages', JSON.stringify(stages));\n          dispatch({ type: 'FETCH_SUCCESS' });\n          navigate('/stage6');\n        } else {\n          navigate('/stage6');\n        }\n      } catch (err) {\n        dispatch({ type: 'FETCH_FAILED' });\n        toast.error(getError(err));\n      }\n    } else {\n      toast.error('Wrong Password!');\n    }\n  };\n  return (\n    <section className=\"question-page\">\n      {loading && (\n        <div className=\"overlay1\">\n          <div className=\"loading-box\">\n            <ReactLoading\n              type=\"spinningBubbles\"\n              color=\"#00a2ff\"\n              height={'10%'}\n              width={'10%'}\n            />\n          </div>\n        </div>\n      )}\n      <header className=\"question-header\"> Stage 5 </header>{' '}\n      <main className=\"question-container\">\n        <div className=\"question-description\">\n          <p>\n            Bob the robber is trying to rob a bank, The Vault is highly secured\n            and ecoded, however Bob outsmarted the security and reached the\n            final security section. The pin for opening the vault is encoded, so\n            help Bob to decode the pin and open the vault. The secret key for\n            the next stage is result.\n          </p>{' '}\n        </div>{' '}\n        <div className=\"format\">\n          <h3> INPUT: - </h3>{' '}\n          <p>\n            The input consists of a string mixed with numbers and alphabets.\n          </p>\n          <br />\n          <h3> CONSTRAINTS: - </h3>{' '}\n          <p>\n            {' '}\n            0 &lt; strlen(S) &lt; 10<sup>5</sup>\n          </p>\n          <br />\n          <h3> OUTPUT: - </h3> <p>Print the decoded pin.</p>{' '}\n        </div>\n        <br />\n        <div className=\"sample-input\">\n          <h3> SAMPLE INPUT 1: - </h3> <p>a11472o5t6</p>\n          <br />\n          <h3> SAMPLE OUTPUT 1: - </h3> <p> 0 2 1 0 1 1 1 1 0 0 </p>\n        </div>\n        <br />\n        <div className=\"sample-input\">\n          <h3> SAMPLE INPUT 2: - </h3> <p>lw4n88j12n1</p>\n          <br />\n          <h3> SAMPLE OUTPUT 2: - </h3> <p> 0 2 1 0 1 0 0 0 2 0 </p>\n        </div>{' '}\n      </main>\n      <div className=\"gift-container\">\n        <div className=\"box\">\n          <div className=\"box-body\">\n            <div className=\"input-container\">1v88886l256338ar0ekk</div>\n            <div className=\"box-lid\">\n              <div className=\"box-bowtie\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <section className=\"stage-form-container\">\n        <form className=\"stage-form\" onSubmit={submitHandler}>\n          <div className=\"input-field-tags\">\n            <label>\n              {' '}\n              Password <div className=\"required-element\"> * </div>{' '}\n            </label>{' '}\n            <input\n              type=\"password\"\n              onChange={(e) => setPassword(e.target.value)}\n              className=\"input-fields stage-input-fields\"\n              required\n            />\n          </div>{' '}\n          <button type=\"submit\" className=\"continue-button\">\n            Continue{' '}\n          </button>{' '}\n        </form>{' '}\n        <div className=\"coding-image-container\">\n          <img src={require('../assets/coding.gif')} alt=\"Coding\" />\n        </div>{' '}\n      </section>{' '}\n      <section className=\"pagination-button-container\">\n        <Link to=\"/stage4\" className=\"previous-button\">\n          <i className=\"fa-solid fa-angles-left left-arrow\"> </i> Previous{' '}\n        </Link>{' '}\n        {stages.includes(5) && (\n          <Link to=\"/stage6\" className=\"next-button\">\n            Next <i className=\"fa-solid fa-angles-right right-arrow\"> </i>{' '}\n          </Link>\n        )}\n      </section>{' '}\n    </section>\n  );\n}\n","C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\utils.js",[],[],"C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\components\\Navbar.js",["117","118"],[],"C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\Question6Screen.js",["119"],[],"import React, { useContext, useEffect, useReducer, useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport '../styles/QuestionScreen.css';\r\nimport { getError } from '../utils';\r\nimport Axios from 'axios';\r\nimport { Store } from '../Store';\r\nimport ReactLoading from 'react-loading';\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_REQUEST':\r\n      return { ...state, loading: true };\r\n    case 'FETCH_SUCCESS':\r\n      return { ...state, loading: false };\r\n    case 'FETCH_FAILED':\r\n      return { ...state, loading: false };\r\n  }\r\n};\r\n\r\nexport default function Question1Screen() {\r\n  const { state, dispatch: ctxDispatch } = useContext(Store);\r\n  const { userInfo, stages } = state;\r\n\r\n  const [{ loading }, dispatch] = useReducer(reducer, { loading: false });\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [password, setPassword] = useState('');\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n  const submitHandler = async (e) => {\r\n    e.preventDefault();\r\n    if (password === '1 1 1 2 0 1 2 0 5 0') {\r\n      try {\r\n        if (!stages.includes(6)) {\r\n          const rollno = userInfo.rollno;\r\n          const name = userInfo.name;\r\n          const email = userInfo.email;\r\n          dispatch({ type: 'FETCH_REQUEST' });\r\n          const { data } = await Axios.put(\r\n            '/stages/stage6',\r\n            {\r\n              rollno,\r\n              name,\r\n              email,\r\n            },\r\n            { headers: { authorization: `Bearer ${userInfo.token}` } }\r\n          );\r\n          stages.push(data.stage);\r\n          ctxDispatch({ type: 'STAGE', payload: stages });\r\n          localStorage.setItem('stages', JSON.stringify(stages));\r\n          dispatch({ type: 'FETCH_SUCCESS' });\r\n          navigate('/stage7');\r\n        } else {\r\n          navigate('/stage1');\r\n        }\r\n      } catch (err) {\r\n        dispatch({ type: 'FETCH_FAILED' });\r\n        toast.error(getError(err));\r\n      }\r\n    } else {\r\n      toast.error('Wrong Password!');\r\n    }\r\n  };\r\n  return (\r\n    <section className=\"question-page\">\r\n      {loading && (\r\n        <div className=\"overlay1\">\r\n          <div className=\"loading-box\">\r\n            <ReactLoading\r\n              type=\"spinningBubbles\"\r\n              color=\"#00a2ff\"\r\n              height={'10%'}\r\n              width={'10%'}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n      <header className=\"question-header\"> Stage 6 </header>{' '}\r\n      <main className=\"question-container\">\r\n        <div className=\"question-description\">\r\n          <p>\r\n            Bob the robber is trying to rob a bank, The Vault is highly secured\r\n            and ecoded, however Bob outsmarted the security and reached the\r\n            final security section. The pin for opening the vault is encoded, so\r\n            help Bob to decode the pin and open the vault. The secret key for\r\n            the next stage is result.\r\n          </p>{' '}\r\n        </div>{' '}\r\n        <div className=\"format\">\r\n          <h3> INPUT: - </h3>{' '}\r\n          <p>\r\n            The input consists of a string mixed with numbers and alphabets.\r\n          </p>\r\n          <br />\r\n          <h3> CONSTRAINTS: - </h3>{' '}\r\n          <p>\r\n            {' '}\r\n            0 &lt; strlen(S) &lt; 10<sup>5</sup>\r\n          </p>\r\n          <br />\r\n          <h3> OUTPUT: - </h3> <p>Print the decoded pin.</p>{' '}\r\n        </div>\r\n        <br />\r\n        <div className=\"sample-input\">\r\n          <h3> SAMPLE INPUT 1: - </h3> <p>a11472o5t6</p>\r\n          <br />\r\n          <h3> SAMPLE OUTPUT 1: - </h3> <p> 0 2 1 0 1 1 1 1 0 0 </p>\r\n        </div>\r\n        <br />\r\n        <div className=\"sample-input\">\r\n          <h3> SAMPLE INPUT 2: - </h3> <p>lw4n88j12n1</p>\r\n          <br />\r\n          <h3> SAMPLE OUTPUT 2: - </h3> <p> 0 2 1 0 1 0 0 0 2 0 </p>\r\n        </div>{' '}\r\n      </main>\r\n      <div className=\"gift-container\">\r\n        <div className=\"box\">\r\n          <div className=\"box-body\">\r\n            <div className=\"input-container\">1v88886l256338ar0ekk</div>\r\n            <div className=\"box-lid\">\r\n              <div className=\"box-bowtie\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <section className=\"stage-form-container\">\r\n        <form className=\"stage-form\" onSubmit={submitHandler}>\r\n          <div className=\"input-field-tags\">\r\n            <label>\r\n              {' '}\r\n              Password <div className=\"required-element\"> * </div>{' '}\r\n            </label>{' '}\r\n            <input\r\n              type=\"password\"\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              className=\"input-fields stage-input-fields\"\r\n              required\r\n            />\r\n          </div>{' '}\r\n          <button type=\"submit\" className=\"continue-button\">\r\n            Continue{' '}\r\n          </button>{' '}\r\n        </form>{' '}\r\n        <div className=\"coding-image-container\">\r\n          <img src={require('../assets/coding.gif')} alt=\"Coding\" />\r\n        </div>{' '}\r\n      </section>{' '}\r\n      <section className=\"pagination-button-container\">\r\n        <Link to=\"/stage5\" className=\"previous-button\">\r\n          <i className=\"fa-solid fa-angles-left left-arrow\"> </i> Previous{' '}\r\n        </Link>{' '}\r\n        {stages.includes(6) && (\r\n          <Link to=\"/stage7\" className=\"next-button\">\r\n            Next <i className=\"fa-solid fa-angles-right right-arrow\"> </i>{' '}\r\n          </Link>\r\n        )}\r\n      </section>{' '}\r\n    </section>\r\n  );\r\n}\r\n","C:\\Users\\91997\\Downloads\\coding_club_event-master\\coding_club_event-master\\front_end\\src\\screens\\Question7Screen.js",["120"],[],"import React, { useContext, useEffect, useReducer, useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport '../styles/QuestionScreen.css';\r\nimport { getError } from '../utils';\r\nimport Axios from 'axios';\r\nimport { Store } from '../Store';\r\nimport ReactLoading from 'react-loading';\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_REQUEST':\r\n      return { ...state, loading: true };\r\n    case 'FETCH_SUCCESS':\r\n      return { ...state, loading: false };\r\n    case 'FETCH_FAILED':\r\n      return { ...state, loading: false };\r\n  }\r\n};\r\n\r\nexport default function Question1Screen() {\r\n  const { state, dispatch: ctxDispatch } = useContext(Store);\r\n  const { userInfo, stages } = state;\r\n\r\n  const [{ loading }, dispatch] = useReducer(reducer, { loading: false });\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [password, setPassword] = useState('');\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n  const submitHandler = async (e) => {\r\n    e.preventDefault();\r\n    if (password === '1 1 1 2 0 1 2 0 5 0') {\r\n      try {\r\n        if (!stages.includes(7)) {\r\n          const rollno = userInfo.rollno;\r\n          const name = userInfo.name;\r\n          const email = userInfo.email;\r\n          dispatch({ type: 'FETCH_REQUEST' });\r\n          const { data } = await Axios.put(\r\n            '/stages/stage7',\r\n            {\r\n              rollno,\r\n              name,\r\n              email,\r\n            },\r\n            { headers: { authorization: `Bearer ${userInfo.token}` } }\r\n          );\r\n          stages.push(data.stage);\r\n          ctxDispatch({ type: 'STAGE', payload: stages });\r\n          localStorage.setItem('stages', JSON.stringify(stages));\r\n          dispatch({ type: 'FETCH_SUCCESS' });\r\n          navigate('/finish');\r\n        } else {\r\n          navigate('/finish');\r\n        }\r\n      } catch (err) {\r\n        dispatch({ type: 'FETCH_FAILED' });\r\n        toast.error(getError(err));\r\n      }\r\n    } else {\r\n      toast.error('Wrong Password!');\r\n    }\r\n  };\r\n  return (\r\n    <section className=\"question-page\">\r\n      {loading && (\r\n        <div className=\"overlay1\">\r\n          <div className=\"loading-box\">\r\n            <ReactLoading\r\n              type=\"spinningBubbles\"\r\n              color=\"#00a2ff\"\r\n              height={'10%'}\r\n              width={'10%'}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n      <header className=\"question-header\"> Stage 7 </header>{' '}\r\n      <main className=\"question-container\">\r\n        <div className=\"question-description\">\r\n          <p>\r\n            Bob the robber is trying to rob a bank, The Vault is highly secured\r\n            and ecoded, however Bob outsmarted the security and reached the\r\n            final security section. The pin for opening the vault is encoded, so\r\n            help Bob to decode the pin and open the vault. The secret key for\r\n            the next stage is result.\r\n          </p>{' '}\r\n        </div>{' '}\r\n        <div className=\"format\">\r\n          <h3> INPUT: - </h3>{' '}\r\n          <p>\r\n            The input consists of a string mixed with numbers and alphabets.\r\n          </p>\r\n          <br />\r\n          <h3> CONSTRAINTS: - </h3>{' '}\r\n          <p>\r\n            {' '}\r\n            0 &lt; strlen(S) &lt; 10<sup>5</sup>\r\n          </p>\r\n          <br />\r\n          <h3> OUTPUT: - </h3> <p>Print the decoded pin.</p>{' '}\r\n        </div>\r\n        <br />\r\n        <div className=\"sample-input\">\r\n          <h3> SAMPLE INPUT 1: - </h3> <p>a11472o5t6</p>\r\n          <br />\r\n          <h3> SAMPLE OUTPUT 1: - </h3> <p> 0 2 1 0 1 1 1 1 0 0 </p>\r\n        </div>\r\n        <br />\r\n        <div className=\"sample-input\">\r\n          <h3> SAMPLE INPUT 2: - </h3> <p>lw4n88j12n1</p>\r\n          <br />\r\n          <h3> SAMPLE OUTPUT 2: - </h3> <p> 0 2 1 0 1 0 0 0 2 0 </p>\r\n        </div>{' '}\r\n      </main>\r\n      <div className=\"gift-container\">\r\n        <div className=\"box\">\r\n          <div className=\"box-body\">\r\n            <div className=\"input-container\">1v88886l256338ar0ekk</div>\r\n            <div className=\"box-lid\">\r\n              <div className=\"box-bowtie\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <section className=\"stage-form-container\">\r\n        <form className=\"stage-form\" onSubmit={submitHandler}>\r\n          <div className=\"input-field-tags\">\r\n            <label>\r\n              {' '}\r\n              Password <div className=\"required-element\"> * </div>{' '}\r\n            </label>{' '}\r\n            <input\r\n              type=\"password\"\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              className=\"input-fields stage-input-fields\"\r\n              required\r\n            />\r\n          </div>{' '}\r\n          <button type=\"submit\" className=\"continue-button\">\r\n            Continue{' '}\r\n          </button>{' '}\r\n        </form>{' '}\r\n        <div className=\"coding-image-container\">\r\n          <img src={require('../assets/coding.gif')} alt=\"Coding\" />\r\n        </div>{' '}\r\n      </section>{' '}\r\n      <section className=\"pagination-button-container\">\r\n        <Link to=\"/stage6\" className=\"previous-button\">\r\n          <i className=\"fa-solid fa-angles-left left-arrow\"> </i> Previous{' '}\r\n        </Link>{' '}\r\n        {stages.includes(7) && (\r\n          <Link to=\"/finish\" className=\"next-button\">\r\n            Next <i className=\"fa-solid fa-angles-right right-arrow\"> </i>{' '}\r\n          </Link>\r\n        )}\r\n      </section>{' '}\r\n    </section>\r\n  );\r\n}\r\n",{"ruleId":"121","severity":1,"message":"122","line":26,"column":28,"nodeType":"123","messageId":"124","endLine":26,"endColumn":39},{"ruleId":"121","severity":1,"message":"125","line":14,"column":11,"nodeType":"123","messageId":"124","endLine":14,"endColumn":18},{"ruleId":"126","severity":1,"message":"127","line":10,"column":3,"nodeType":"128","messageId":"129","endLine":17,"endColumn":4},{"ruleId":"130","severity":1,"message":"131","line":135,"column":6,"nodeType":"132","endLine":135,"endColumn":8,"suggestions":"133"},{"ruleId":"121","severity":1,"message":"122","line":7,"column":28,"nodeType":"123","messageId":"124","endLine":7,"endColumn":39},{"ruleId":"126","severity":1,"message":"127","line":11,"column":3,"nodeType":"128","messageId":"129","endLine":18,"endColumn":4},{"ruleId":"126","severity":1,"message":"127","line":11,"column":3,"nodeType":"128","messageId":"129","endLine":18,"endColumn":4},{"ruleId":"126","severity":1,"message":"127","line":11,"column":3,"nodeType":"128","messageId":"129","endLine":18,"endColumn":4},{"ruleId":"126","severity":1,"message":"127","line":14,"column":3,"nodeType":"128","messageId":"129","endLine":21,"endColumn":4},{"ruleId":"121","severity":1,"message":"134","line":32,"column":11,"nodeType":"123","messageId":"124","endLine":32,"endColumn":16},{"ruleId":"126","severity":1,"message":"127","line":11,"column":3,"nodeType":"128","messageId":"129","endLine":18,"endColumn":4},{"ruleId":"126","severity":1,"message":"127","line":11,"column":3,"nodeType":"128","messageId":"129","endLine":18,"endColumn":4},{"ruleId":"121","severity":1,"message":"122","line":7,"column":28,"nodeType":"123","messageId":"124","endLine":7,"endColumn":39},{"ruleId":"121","severity":1,"message":"135","line":9,"column":20,"nodeType":"123","messageId":"124","endLine":9,"endColumn":31},{"ruleId":"126","severity":1,"message":"127","line":11,"column":3,"nodeType":"128","messageId":"129","endLine":18,"endColumn":4},{"ruleId":"126","severity":1,"message":"127","line":11,"column":3,"nodeType":"128","messageId":"129","endLine":18,"endColumn":4},"no-unused-vars","'ctxDispatch' is assigned a value but never used.","Identifier","unusedVar","'isAdmin' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'ctxDispatch'. Either include it or remove the dependency array.","ArrayExpression",["136"],"'state' is assigned a value but never used.","'setMenuOpen' is assigned a value but never used.",{"desc":"137","fix":"138"},"Update the dependencies array to be: [ctxDispatch]",{"range":"139","text":"140"},[4582,4584],"[ctxDispatch]"]